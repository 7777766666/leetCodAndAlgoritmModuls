#include <iostream>
#include <fstream>
#include <map>
#include <string>

using namespace std;

int check(map<int, int*>& map, int userLine, int allCars);

int main() {
    ifstream reader("input.txt");
    ofstream writer("output.txt");

    int tests;
    reader >> tests;

    for (int j = 0; j < tests; j++) {
        int userLine, allCars;
        reader >> userLine >> allCars;

        map<int, int*> mp;
        for (int i = 0; i < allCars; i++) {
            int key, car;
            reader >> key >> car;

            if (mp.count(key)) {
                int* cars = mp[key];
                cars[car - 1] = -1;
                mp[key] = cars;
            } else {
                int* newCar = new int[3]();
                newCar[car - 1] = -1;
                mp[key] = newCar;
            }
        }

        map<int, int*> sortedMap(mp.begin(), mp.end());

        int check_result = check(sortedMap, userLine, allCars);

        if (tests - j == 1) {
            writer << check_result;
        } else {
            writer << check_result << endl;
        }

        for (auto kv : mp) {
            delete[] kv.second;
        }
    }

    writer.close();
    reader.close();

    return 0;
}

int check(map<int, int*>& map, int userLine, int allCars) {
    if (userLine <= 1 || allCars < 3) {
        return userLine;
    }

    int l = 0;
    int m = 0;
    int r = 0;

    int l1;
    int m1;
    int r1;

    for (auto kv : map) {
        if (map.find(kv.first - 1) == map.end()) {
            l = 0;
            m = 0;
            r = 0;
        }

        int* value = kv.second;

        if (value[0] == 0 && (l == 0 || m == 0)) {
            l1 = 0;
        } else {
            l1 = -1;
        }

        if (value[1] == 0 && (l == 0 || m == 0 || r == 0)) {
            m1 = 0;
        } else {
            m1 = -1;
        }

        if (value[2] == 0 && (m == 0 || r == 0)) {
            r1 = 0;
        } else {
            r1 = -1;
        }

        if ((l1 + m1 + r1) == -3) {
            return (kv.first - 1);
        }

        l = l1;
        m = m1;
        r = r1;
    }

    return userLine;
}
#include <iostream>
#include <fstream>
#include <map>
#include <string>

using namespace std;

int check(map<int, int*>& map, int userLine, int allCars);

int main() {
    ifstream reader("input.txt");
    ofstream writer("output.txt");

    int tests;
    reader >> tests;

    for (int j = 0; j < tests; j++) {
        int userLine, allCars;
        reader >> userLine >> allCars;

        map<int, int*> mp;
        for (int i = 0; i < allCars; i++) {
            int key, car;
            reader >> key >> car;

            if (mp.count(key)) {
                int* cars = mp[key];
                cars[car - 1] = -1;
                mp[key] = cars;
            } else {
                int* newCar = new int[3]();
                newCar[car - 1] = -1;
                mp[key] = newCar;
            }
        }

        map<int, int*> sortedMap(mp.begin(), mp.end());

        int check_result = check(sortedMap, userLine, allCars);

        if (tests - j == 1) {
            writer << check_result;
        } else {
            writer << check_result << endl;
        }

        for (auto kv : mp) {
            delete[] kv.second;
        }
    }

    writer.close();
    reader.close();

    return 0;
}

int check(map<int, int*>& map, int userLine, int allCars) {
    if (userLine <= 1 || allCars < 3) {
        return userLine;
    }

    int l = 0;
    int m = 0;
    int r = 0;

    int l1;
    int m1;
    int r1;

    for (auto kv : map) {
        if (map.find(kv.first - 1) == map.end()) {
            l = 0;
            m = 0;
            r = 0;
        }

        int* value = kv.second;

        if (value[0] == 0 && (l == 0 || m == 0)) {
            l1 = 0;
        } else {
            l1 = -1;
        }

        if (value[1] == 0 && (l == 0 || m == 0 || r == 0)) {
            m1 = 0;
        } else {
            m1 = -1;
        }

        if (value[2] == 0 && (m == 0 || r == 0)) {
            r1 = 0;
        } else {
            r1 = -1;
        }

        if ((l1 + m1 + r1) == -3) {
            return (kv.first - 1);
        }

        l = l1;
        m = m1;
        r = r1;
    }

    return userLine;
}
